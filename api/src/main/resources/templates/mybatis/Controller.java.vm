package ${package.Controller};

import ${package.Entity.split(".modules.${entity.toLowerCase()}.entity")[0]}.modules.untils.PageUtils;
import ${package.Entity.split(".modules.${entity.toLowerCase()}.entity")[0]}.modules.untils.query.QueryVo;
import ${package.Entity.split(".modules.${entity.toLowerCase()}.entity")[0]}.utils.CommonResult;
import ${package.Entity.split(".modules.${entity.toLowerCase()}.entity")[0]}.utils.PageBean;
import ${package.Entity.split(".modules.${entity.toLowerCase()}.entity")[0]}.utils.Result;
import com.xiaohe.xplatform.utils.StringUtil;
import com.xiaohe.xplatform.config.aspect.LogOperate;
import com.xiaohe.xplatform.config.validate.XException;
import ${package.Service}.${entity}Service;
import ${package.Entity}.${entity};
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
/**
 *
 * $!{table.comment} ${entity}Controller层
 *
 * @author ${author}
 * @since ${date}
 */
@RestController
@RequestMapping(value = "/${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}s")
public class ${table.controllerName} {
private static Logger log = LoggerFactory.getLogger(${table.controllerName}.class);
    @Autowired
    private ${entity}Service ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}Service;

        /**
         * 保存对象<br/>
         *
         * @param ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)} 对象
         */
        @PostMapping
        @RequiresPermissions("sys:${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}:save")
        @LogOperate(description = "新增${entity}")
         public Result save(@Validated @RequestBody ${entity} ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}) {
                Result result = new Result();
                try {
                 ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}Service.insert(${entity.substring(0, 1).toLowerCase()}${entity.substring(1)});
                } catch (XException e) {
                log.error(e.getMessage());
                return result.error(e.getRet(), e.getMsg());
                } catch (Exception e) {
                log.error(e.getMessage());
                return result.error(2001, "新增失败");
                }
                return result.ok();
                }
        /**
        * 更新
        *
        * @param ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}
        * @return
        */
        @PutMapping(value = "/{id}")
        @RequiresPermissions("sys:${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}:update")
        @LogOperate(description = "更新${entity}")
        public Result update(@Validated @RequestBody ${entity} ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}, @PathVariable("id") Integer id) {
                Result result = new Result();
                try {
                      ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}Service.updateById(${entity.substring(0, 1).toLowerCase()}${entity.substring(1)});
                } catch (Exception e) {
                log.error(e.getMessage());
                return result.error(2002, "修改失败");
                }
                return result.ok();
                }
        /**
        * 通过id集合删除对象
        *
        * @param id id集合
        */
        @DeleteMapping(value = "/{id}")
        @RequiresPermissions("sys:${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}:delete")
        @LogOperate(description = "删除${entity}")
        public Result deleteById(@PathVariable("id") String ids) {
                Result result = new Result();
                try {
                     ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}Service.deleteBatchIds(StringUtil.stringToIntegerList(ids));
                } catch (Exception e) {
                log.error(e.getMessage());
                return result.error(2003, "删除失败");
                }
                return result.ok();
                }
        /**
            * 通过id查找对象
            *
            * @param id id
            * @return RepairRecord 对象
            */
        @GetMapping(value = "/{id}")
        @RequiresPermissions("sys:${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}:info")
        public Result findById(@PathVariable("id") Integer id) {
                CommonResult result = new CommonResult();
                try {
                result.setDatas(${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}Service.selectById(id));
                } catch (Exception e) {
                log.error(e.getMessage());
                return result.error(2004, "不存在");
                }
                return result.ok();
                }

        /**
        * 分页查询
        *
        * @return Page<RepairRecord> 对象
        */
        @PostMapping(value = "/pages")
        @RequiresPermissions("sys:${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}:list")
        public Result findByPage(@RequestBody QueryVo queryVo) {
                PageUtils page = ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}Service.queryPage(queryVo);
                CommonResult result = new CommonResult();
                try {
                PageBean<${entity}> pageBean = new PageBean<>();
                pageBean.setCurPage(page.getCurrPage());
                pageBean.setItemCounts(page.getTotalCount());
                pageBean.setPageSize(page.getTotalPage());
                List<${entity}> ${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}List = page.getList() != null ? (List<${entity}>) page.getList() : null;
                pageBean.setList(${entity.substring(0, 1).toLowerCase()}${entity.substring(1)}List);
                result.setDatas(pageBean);
                } catch (Exception e) {
                e.printStackTrace();
                log.error(e.getMessage());
                return result.error(2005, "查询出错");
                }
                return result.ok();
                }
        }
